# -*- coding: utf-8 -*-
#
# Copyright (C) 2021 Dmitriy Yefremov
#
# This file is part of E2Toolkit.
#
# E2Toolkit is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# E2Toolkit is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with E2Toolkit.  If not, see <http://www.gnu.org/licenses/>.
#
# Author: Dmitriy Yefremov
#


""" Core UI module. """
from enum import IntEnum

from PyQt5 import QtCore, QtGui, QtWidgets

from app.ui.views import *


class Page(IntEnum):
    """ Main stack widget page. """
    BOUQUETS = 0
    SAT = 1
    PICONS = 2
    STREAMS = 3
    EPG = 4
    TIMER = 5
    FTP = 6
    LOGO = 7


class MainUiWindow(QtWidgets.QMainWindow):
    """ Base UI class.

        Based on code from the PyQt5 UI generator.
    """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.setObjectName("MainWindow")
        self.resize(1000, 700)
        self.setMinimumSize(QtCore.QSize(720, 560))
        self.setDocumentMode(False)
        # Central widget.
        self.central_widget = QtWidgets.QWidget(self)
        self.central_widget.setObjectName("central_widget")
        self.central_widget_layout = QtWidgets.QGridLayout(self.central_widget)
        self.central_widget_layout.setObjectName("central_widget_layout")
        self.main_layout = QtWidgets.QVBoxLayout()
        self.main_layout.setSpacing(6)
        self.main_layout.setObjectName("main_layout")
        # ******************** Main toolbar ******************** #
        # Main header with buttons.
        self.header_layout = QtWidgets.QHBoxLayout()
        self.header_layout.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.header_layout.setContentsMargins(2, 5, 2, 5)
        self.header_layout.setSpacing(2)
        self.header_layout.setObjectName("header_layout")
        # Profiles combo box.
        self.profile_combo_box = QtWidgets.QComboBox(self.central_widget)
        size_policy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Preferred)
        size_policy.setHorizontalStretch(0)
        size_policy.setVerticalStretch(0)
        size_policy.setHeightForWidth(self.profile_combo_box.sizePolicy().hasHeightForWidth())
        self.profile_combo_box.setSizePolicy(size_policy)
        self.profile_combo_box.setMinimumSize(QtCore.QSize(100, 0))
        self.profile_combo_box.setFrame(True)
        self.profile_combo_box.setObjectName("profile_combo_box")
        self.header_layout.addWidget(self.profile_combo_box)
        # Download button.
        self.download_tool_button = QtWidgets.QToolButton(self.central_widget)
        size_policy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        size_policy.setHorizontalStretch(0)
        size_policy.setVerticalStretch(0)
        size_policy.setHeightForWidth(self.download_tool_button.sizePolicy().hasHeightForWidth())
        self.download_tool_button.setSizePolicy(size_policy)
        self.download_tool_button.setMinimumSize(QtCore.QSize(70, 0))
        self.download_tool_button.setArrowType(QtCore.Qt.NoArrow)
        self.download_tool_button.setObjectName("download_tool_button")
        self.header_layout.addWidget(self.download_tool_button)
        # Upload button.
        self.upload_tool_button = QtWidgets.QToolButton(self.central_widget)
        size_policy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        size_policy.setHorizontalStretch(0)
        size_policy.setVerticalStretch(0)
        size_policy.setHeightForWidth(self.upload_tool_button.sizePolicy().hasHeightForWidth())
        self.upload_tool_button.setSizePolicy(size_policy)
        self.upload_tool_button.setMinimumSize(QtCore.QSize(70, 0))
        self.upload_tool_button.setArrowType(QtCore.Qt.NoArrow)
        self.upload_tool_button.setObjectName("upload_tool_button")
        self.header_layout.addWidget(self.upload_tool_button)
        spacer_item = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.header_layout.addItem(spacer_item)
        # Bouquets button.
        self.bouquet_tool_button = QtWidgets.QToolButton(self.central_widget)
        size_policy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        size_policy.setHorizontalStretch(10)
        size_policy.setVerticalStretch(0)
        size_policy.setHeightForWidth(self.bouquet_tool_button.sizePolicy().hasHeightForWidth())
        self.bouquet_tool_button.setSizePolicy(size_policy)
        self.bouquet_tool_button.setMinimumSize(QtCore.QSize(75, 0))
        self.bouquet_tool_button.setFocusPolicy(QtCore.Qt.NoFocus)
        self.bouquet_tool_button.setCheckable(True)
        self.bouquet_tool_button.setChecked(True)
        self.bouquet_tool_button.setAutoExclusive(True)
        self.bouquet_tool_button.setObjectName("bouquet_tool_button")
        self.header_layout.addWidget(self.bouquet_tool_button)
        # Satellite button.
        self.satellite_tool_button = QtWidgets.QToolButton(self.central_widget)
        size_policy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        size_policy.setHorizontalStretch(0)
        size_policy.setVerticalStretch(0)
        size_policy.setHeightForWidth(self.satellite_tool_button.sizePolicy().hasHeightForWidth())
        self.satellite_tool_button.setSizePolicy(size_policy)
        self.satellite_tool_button.setMinimumSize(QtCore.QSize(75, 0))
        self.satellite_tool_button.setFocusPolicy(QtCore.Qt.NoFocus)
        self.satellite_tool_button.setCheckable(True)
        self.satellite_tool_button.setAutoExclusive(True)
        self.satellite_tool_button.setObjectName("satellite_tool_button")
        self.header_layout.addWidget(self.satellite_tool_button)
        # Picons button.
        self.picon_tool_button = QtWidgets.QToolButton(self.central_widget)
        size_policy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        size_policy.setHorizontalStretch(0)
        size_policy.setVerticalStretch(0)
        size_policy.setHeightForWidth(self.picon_tool_button.sizePolicy().hasHeightForWidth())
        self.picon_tool_button.setSizePolicy(size_policy)
        self.picon_tool_button.setMinimumSize(QtCore.QSize(75, 0))
        self.picon_tool_button.setFocusPolicy(QtCore.Qt.NoFocus)
        self.picon_tool_button.setCheckable(True)
        self.picon_tool_button.setAutoExclusive(True)
        self.picon_tool_button.setObjectName("picon_tool_button")
        self.header_layout.addWidget(self.picon_tool_button)
        # Streams button.
        self.streams_tool_button = QtWidgets.QToolButton(self.central_widget)
        size_policy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        size_policy.setHorizontalStretch(0)
        size_policy.setVerticalStretch(0)
        size_policy.setHeightForWidth(self.streams_tool_button.sizePolicy().hasHeightForWidth())
        self.streams_tool_button.setSizePolicy(size_policy)
        self.streams_tool_button.setMinimumSize(QtCore.QSize(75, 0))
        self.streams_tool_button.setFocusPolicy(QtCore.Qt.NoFocus)
        self.streams_tool_button.setCheckable(True)
        self.streams_tool_button.setAutoExclusive(True)
        self.streams_tool_button.setVisible(False)
        self.streams_tool_button.setObjectName("streams_tool_button")
        self.header_layout.addWidget(self.streams_tool_button)
        # EPG button.
        self.epg_tool_button = QtWidgets.QToolButton(self.central_widget)
        size_policy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        size_policy.setHorizontalStretch(0)
        size_policy.setVerticalStretch(0)
        size_policy.setHeightForWidth(self.epg_tool_button.sizePolicy().hasHeightForWidth())
        self.epg_tool_button.setSizePolicy(size_policy)
        self.epg_tool_button.setMinimumSize(QtCore.QSize(75, 0))
        self.epg_tool_button.setFocusPolicy(QtCore.Qt.NoFocus)
        self.epg_tool_button.setCheckable(True)
        self.epg_tool_button.setAutoExclusive(True)
        self.epg_tool_button.setObjectName("epg_tool_button")
        self.header_layout.addWidget(self.epg_tool_button)
        # Timer button.
        self.timer_tool_button = QtWidgets.QToolButton(self.central_widget)
        self.timer_tool_button.setMinimumSize(QtCore.QSize(75, 0))
        self.timer_tool_button.setCheckable(True)
        self.timer_tool_button.setAutoExclusive(True)
        self.timer_tool_button.setObjectName("timer_tool_button")
        self.header_layout.addWidget(self.timer_tool_button)
        # FTP button.
        self.ftp_tool_button = QtWidgets.QToolButton(self.central_widget)
        size_policy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        size_policy.setHorizontalStretch(0)
        size_policy.setVerticalStretch(0)
        size_policy.setHeightForWidth(self.ftp_tool_button.sizePolicy().hasHeightForWidth())
        self.ftp_tool_button.setSizePolicy(size_policy)
        self.ftp_tool_button.setMinimumSize(QtCore.QSize(75, 0))
        self.ftp_tool_button.setFocusPolicy(QtCore.Qt.NoFocus)
        self.ftp_tool_button.setCheckable(True)
        self.ftp_tool_button.setAutoExclusive(True)
        self.ftp_tool_button.setObjectName("ftp_tool_button")
        self.header_layout.addWidget(self.ftp_tool_button)
        # Logo button.
        self.logo_tool_button = QtWidgets.QToolButton(self.central_widget)
        size_policy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        size_policy.setHorizontalStretch(0)
        size_policy.setVerticalStretch(0)
        size_policy.setHeightForWidth(self.logo_tool_button.sizePolicy().hasHeightForWidth())
        self.logo_tool_button.setSizePolicy(size_policy)
        self.logo_tool_button.setMinimumSize(QtCore.QSize(75, 0))
        self.logo_tool_button.setFocusPolicy(QtCore.Qt.NoFocus)
        self.logo_tool_button.setCheckable(True)
        self.logo_tool_button.setAutoExclusive(True)
        self.logo_tool_button.setObjectName("logo_tool_button")
        self.header_layout.addWidget(self.logo_tool_button)
        # Spacers
        spacer_item = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.header_layout.addItem(spacer_item)
        spacer_item2 = QtWidgets.QSpacerItem(170, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.header_layout.addItem(spacer_item2)
        # Control button.
        self.control_tool_button = QtWidgets.QToolButton(self.central_widget)
        self.control_tool_button.setMinimumSize(QtCore.QSize(70, 0))
        self.control_tool_button.setCheckable(True)
        self.control_tool_button.setObjectName("control_tool_button")
        self.header_layout.addWidget(self.control_tool_button)
        self.main_layout.addLayout(self.header_layout)
        self.central_widget_layout.addLayout(self.main_layout, 0, 0, 1, 1)
        # Main frame.
        self.main_frame = QtWidgets.QFrame(self.central_widget)
        self.main_frame.setFrameShape(QtWidgets.QFrame.Box)
        self.main_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.main_frame.setObjectName("main_frame")
        self.main_frame_layout = QtWidgets.QGridLayout(self.main_frame)
        self.main_frame_layout.setContentsMargins(2, 2, 2, 2)
        self.main_frame_layout.setObjectName("main_frame_layout")
        self.main_splitter = QtWidgets.QSplitter(self.main_frame)
        self.main_splitter.setOrientation(QtCore.Qt.Horizontal)
        self.main_splitter.setObjectName("main_splitter")
        # Main stacked widget.
        self.stacked_widget = QtWidgets.QStackedWidget(self.main_splitter)
        size_policy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        size_policy.setHorizontalStretch(0)
        size_policy.setVerticalStretch(0)
        size_policy.setHeightForWidth(self.stacked_widget.sizePolicy().hasHeightForWidth())
        self.stacked_widget.setSizePolicy(size_policy)
        self.stacked_widget.setObjectName("stacked_widget")

        # ******************** Pages ******************** #
        # Bouquets page.
        self.bouquet_page = QtWidgets.QWidget()
        self.bouquet_page.setObjectName("bouquet_page")
        self.bouquets_page_layout = QtWidgets.QGridLayout(self.bouquet_page)
        self.bouquets_page_layout.setContentsMargins(2, 0, 6, 2)
        self.bouquets_page_layout.setObjectName("bouquets_page_layout")
        self.services_group_box = QtWidgets.QGroupBox(self.bouquet_page)
        self.services_group_box.setObjectName("services_group_box")
        self.services_group_box_layout = QtWidgets.QVBoxLayout(self.services_group_box)
        self.services_group_box_layout.setContentsMargins(0, 6, 0, 0)
        self.services_group_box_layout.setSpacing(6)
        self.services_group_box_layout.setObjectName("services_group_box_layout")
        self.search_filter_layout = QtWidgets.QHBoxLayout()
        self.search_filter_layout.setContentsMargins(6, 0, 6, -1)
        self.search_filter_layout.setObjectName("search_filter_layout")
        self.filter_free_button = QtWidgets.QToolButton(self.services_group_box)
        self.filter_free_button.setCheckable(True)
        self.filter_free_button.setObjectName("filter_free_button")
        self.search_filter_layout.addWidget(self.filter_free_button)
        self.service_filter_edit = QtWidgets.QLineEdit(self.services_group_box)
        size_policy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        size_policy.setHorizontalStretch(0)
        size_policy.setVerticalStretch(0)
        size_policy.setHeightForWidth(self.service_filter_edit.sizePolicy().hasHeightForWidth())
        self.service_filter_edit.setSizePolicy(size_policy)
        self.service_filter_edit.setInputMask("")
        self.service_filter_edit.setText("")
        self.service_filter_edit.setPlaceholderText("Filter..")
        self.service_filter_edit.setObjectName("service_filter_edit")
        self.search_filter_layout.addWidget(self.service_filter_edit)
        self.filter_type_combo_box = QtWidgets.QComboBox(self.services_group_box)
        self.filter_type_combo_box.setObjectName("filter_type_combo_box")
        self.search_filter_layout.addWidget(self.filter_type_combo_box)
        self.filter_pos_combo_box = QtWidgets.QComboBox(self.services_group_box)
        self.filter_pos_combo_box.setObjectName("filter_pos_combo_box")
        self.search_filter_layout.addWidget(self.filter_pos_combo_box)
        bq_sp_item = QtWidgets.QSpacerItem(13, 25, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.search_filter_layout.addItem(bq_sp_item)
        self.service_search_edit = QtWidgets.QLineEdit(self.services_group_box)
        size_policy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        size_policy.setHorizontalStretch(0)
        size_policy.setVerticalStretch(0)
        size_policy.setHeightForWidth(self.service_search_edit.sizePolicy().hasHeightForWidth())
        self.service_search_edit.setSizePolicy(size_policy)
        self.service_search_edit.setAutoFillBackground(False)
        self.service_search_edit.setInputMask("")
        self.service_search_edit.setText("")
        self.service_search_edit.setClearButtonEnabled(True)
        self.service_search_edit.setObjectName("service_search_edit")
        self.search_filter_layout.addWidget(self.service_search_edit)
        self.services_group_box_layout.addLayout(self.search_filter_layout)
        self.services_view = ServicesView(self.services_group_box)
        self.services_group_box_layout.addWidget(self.services_view)
        self.services_bottom_layout = QtWidgets.QHBoxLayout()
        self.services_bottom_layout.setContentsMargins(6, -1, 6, -1)
        self.services_bottom_layout.setSpacing(6)
        self.services_bottom_layout.setObjectName("services_bottom_layout")
        bq_sp_item2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.services_bottom_layout.addItem(bq_sp_item2)
        self.tv_label = QtWidgets.QLabel(self.services_group_box)
        self.tv_label.setObjectName("tv_label")
        self.services_bottom_layout.addWidget(self.tv_label)
        self.tv_count_label = QtWidgets.QLabel("0", self.services_group_box)
        self.tv_count_label.setObjectName("tv_count_label")
        self.services_bottom_layout.addWidget(self.tv_count_label)
        self.radio_label = QtWidgets.QLabel(self.services_group_box)
        self.radio_label.setObjectName("radio_label")
        self.services_bottom_layout.addWidget(self.radio_label)
        self.radio_count_label = QtWidgets.QLabel("0", self.services_group_box)
        self.radio_count_label.setObjectName("radio_count_label")
        self.services_bottom_layout.addWidget(self.radio_count_label)
        self.data_label = QtWidgets.QLabel(self.services_group_box)
        self.data_label.setObjectName("data_label")
        self.services_bottom_layout.addWidget(self.data_label)
        self.data_count_label = QtWidgets.QLabel("0", self.services_group_box)
        self.data_count_label.setObjectName("data_count_label")
        self.services_bottom_layout.addWidget(self.data_count_label)
        self.services_group_box_layout.addLayout(self.services_bottom_layout)
        self.bouquets_page_layout.addWidget(self.services_group_box, 1, 0, 1, 1)
        self.stacked_widget.addWidget(self.bouquet_page)
        # ******************** Satellite page ******************** #
        self.satellite_page = QtWidgets.QWidget()
        self.satellite_page.setObjectName("satellite_page")
        self.satellite_page_layout = QtWidgets.QGridLayout(self.satellite_page)
        self.satellite_page_layout.setContentsMargins(2, 0, 6, 2)
        self.satellite_page_layout.setObjectName("satellite_page_layout")
        self.satellite_splitter = QtWidgets.QSplitter(self.satellite_page)
        size_policy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        size_policy.setHorizontalStretch(0)
        size_policy.setVerticalStretch(0)
        size_policy.setHeightForWidth(self.satellite_splitter.sizePolicy().hasHeightForWidth())
        self.satellite_splitter.setSizePolicy(size_policy)
        self.satellite_splitter.setOrientation(QtCore.Qt.Horizontal)
        self.satellite_splitter.setObjectName("satellite_splitter")
        self.satellites_group_box = QtWidgets.QGroupBox(self.satellite_splitter)
        self.satellites_group_box.setObjectName("satellites_group_box")
        self.satellite_group_box_layout = QtWidgets.QVBoxLayout(self.satellites_group_box)
        self.satellite_group_box_layout.setContentsMargins(0, 6, 0, 0)
        self.satellite_group_box_layout.setSpacing(6)
        self.satellite_group_box_layout.setObjectName("satellite_group_box_layout")
        self.satellite_top_layout = QtWidgets.QHBoxLayout()
        self.satellite_top_layout.setContentsMargins(6, -1, 6, -1)
        self.satellite_top_layout.setObjectName("satellite_top_layout")
        self.satellite_save_tool_button = QtWidgets.QToolButton(self.satellites_group_box)
        self.satellite_save_tool_button.setEnabled(False)
        self.satellite_save_tool_button.setMinimumSize(QtCore.QSize(75, 0))
        self.satellite_save_tool_button.setObjectName("satellite_save_tool_button")
        self.satellite_top_layout.addWidget(self.satellite_save_tool_button)
        self.satellite_update_tool_button = QtWidgets.QToolButton(self.satellites_group_box)
        self.satellite_update_tool_button.setEnabled(False)
        self.satellite_update_tool_button.setMinimumSize(QtCore.QSize(75, 0))
        self.satellite_update_tool_button.setCheckable(True)
        self.satellite_update_tool_button.setObjectName("satellite_update_tool_button")
        self.satellite_top_layout.addWidget(self.satellite_update_tool_button)
        sat_sp_item = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.satellite_top_layout.addItem(sat_sp_item)
        self.satellite_search_edit = QtWidgets.QLineEdit(self.satellites_group_box)
        size_policy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        size_policy.setHorizontalStretch(0)
        size_policy.setVerticalStretch(0)
        size_policy.setHeightForWidth(self.satellite_search_edit.sizePolicy().hasHeightForWidth())
        self.satellite_search_edit.setSizePolicy(size_policy)
        self.satellite_search_edit.setObjectName("satellite_search_edit")
        self.satellite_top_layout.addWidget(self.satellite_search_edit)
        self.satellite_group_box_layout.addLayout(self.satellite_top_layout)
        self.satellite_view = SatellitesView(self.satellites_group_box)
        self.satellite_group_box_layout.addWidget(self.satellite_view)
        self.satellite_botton_layout = QtWidgets.QHBoxLayout()
        self.satellite_botton_layout.setContentsMargins(6, -1, 6, -1)
        self.satellite_botton_layout.setObjectName("satellite_botton_layout")
        self.satellite_label = QtWidgets.QLabel(self.satellites_group_box)
        self.satellite_label.setObjectName("satellite_label")
        self.satellite_botton_layout.addWidget(self.satellite_label)
        self.satellite_count_label = QtWidgets.QLabel(self.satellites_group_box)
        self.satellite_count_label.setText("0")
        self.satellite_count_label.setObjectName("satellite_count_label")
        self.satellite_botton_layout.addWidget(self.satellite_count_label)
        sat_sp_item2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.satellite_botton_layout.addItem(sat_sp_item2)
        self.satellite_group_box_layout.addLayout(self.satellite_botton_layout)
        self.satellite_update_box = QtWidgets.QGroupBox(self.satellite_splitter)
        size_policy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        size_policy.setHorizontalStretch(0)
        size_policy.setVerticalStretch(0)
        size_policy.setHeightForWidth(self.satellite_update_box.sizePolicy().hasHeightForWidth())
        self.satellite_update_box.setSizePolicy(size_policy)
        self.satellite_update_box.setObjectName("satellite_update_box")
        self.satellite_update_box_layout = QtWidgets.QVBoxLayout(self.satellite_update_box)
        self.satellite_update_box_layout.setContentsMargins(0, 6, 0, 0)
        self.satellite_update_box_layout.setSpacing(6)
        self.satellite_update_box_layout.setObjectName("satellite_update_box_layout")
        self.satellite_update_top_layout = QtWidgets.QHBoxLayout()
        self.satellite_update_top_layout.setContentsMargins(6, -1, 6, -1)
        self.satellite_update_top_layout.setObjectName("satellite_update_top_layout")
        self.satellite_update_src_box = QtWidgets.QComboBox(self.satellite_update_box)
        size_policy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        size_policy.setHorizontalStretch(0)
        size_policy.setVerticalStretch(0)
        size_policy.setHeightForWidth(self.satellite_update_src_box.sizePolicy().hasHeightForWidth())
        self.satellite_update_src_box.setSizePolicy(size_policy)
        self.satellite_update_src_box.setObjectName("satellite_update_src_box")
        self.satellite_update_top_layout.addWidget(self.satellite_update_src_box)
        self.satellite_download_button = QtWidgets.QToolButton(self.satellite_update_box)
        self.satellite_download_button.setObjectName("satellite_download_button")
        self.satellite_update_top_layout.addWidget(self.satellite_download_button)
        sat_sp_item3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.satellite_update_top_layout.addItem(sat_sp_item3)
        self.satellite_update_search_edit = QtWidgets.QLineEdit(self.satellite_update_box)
        size_policy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        size_policy.setHorizontalStretch(0)
        size_policy.setVerticalStretch(0)
        size_policy.setHeightForWidth(self.satellite_update_search_edit.sizePolicy().hasHeightForWidth())
        self.satellite_update_search_edit.setSizePolicy(size_policy)
        self.satellite_update_search_edit.setObjectName("satellite_update_search_edit")
        self.satellite_update_top_layout.addWidget(self.satellite_update_search_edit)
        self.satellite_update_box_layout.addLayout(self.satellite_update_top_layout)
        self.satellite_update_view = SatelliteUpdateView(self.satellite_update_box)
        self.satellite_update_box_layout.addWidget(self.satellite_update_view)
        self.satellite_update_botton_layout = QtWidgets.QHBoxLayout()
        self.satellite_update_botton_layout.setContentsMargins(6, -1, 6, -1)
        self.satellite_update_botton_layout.setObjectName("satellite_update_botton_layout")
        sat_sp_item4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.satellite_update_botton_layout.addItem(sat_sp_item4)
        self.satellite_update_label = QtWidgets.QLabel(self.satellite_update_box)
        self.satellite_update_label.setObjectName("satellite_update_label")
        self.satellite_update_botton_layout.addWidget(self.satellite_update_label)
        self.satellite_update_count_label = QtWidgets.QLabel(self.satellite_update_box)
        self.satellite_update_count_label.setText("0")
        self.satellite_update_count_label.setObjectName("satellite_update_count_label")
        self.satellite_update_botton_layout.addWidget(self.satellite_update_count_label)
        self.satellite_update_box_layout.addLayout(self.satellite_update_botton_layout)
        self.satellite_page_layout.addWidget(self.satellite_splitter, 0, 0, 1, 1)
        self.stacked_widget.addWidget(self.satellite_page)
        # ******************** Picons page ******************** #
        self.picon_page = QtWidgets.QWidget()
        self.picon_page.setObjectName("picon_page")
        self.picons_page_layout = QtWidgets.QGridLayout(self.picon_page)
        self.picons_page_layout.setContentsMargins(0, 0, 0, 0)
        self.picons_page_layout.setObjectName("picons_page_layout")
        self.picon_group_box = QtWidgets.QGroupBox(self.picon_page)
        self.picon_group_box.setObjectName("picon_group_box")
        self.picon_group_box_layout = QtWidgets.QGridLayout(self.picon_group_box)
        self.picon_group_box_layout.setContentsMargins(0, 6, 6, 2)
        self.picon_group_box_layout.setSpacing(6)
        self.picon_group_box_layout.setObjectName("picon_group_box_layout")
        self.picons_stacked_widget = QtWidgets.QStackedWidget(self.picon_group_box)
        self.picons_stacked_widget.setObjectName("picons_stacked_widget")
        self.picon_explorer_page = QtWidgets.QWidget()
        self.picon_explorer_page.setObjectName("picon_explorer_page")
        self.picon_explorer_layout = QtWidgets.QGridLayout(self.picon_explorer_page)
        self.picon_explorer_layout.setContentsMargins(0, 0, 0, 0)
        self.picon_explorer_layout.setHorizontalSpacing(6)
        self.picon_explorer_layout.setObjectName("picon_explorer_layout")
        self.picon_splitter = QtWidgets.QSplitter(self.picon_explorer_page)
        self.picon_splitter.setOrientation(QtCore.Qt.Horizontal)
        self.picon_splitter.setObjectName("picon_splitter")
        self.picon_src_widget = QtWidgets.QWidget(self.picon_splitter)
        self.picon_src_widget.setObjectName("layoutWidget")
        self.picon_src_layout = QtWidgets.QVBoxLayout(self.picon_src_widget)
        self.picon_src_layout.setContentsMargins(0, 0, 0, 0)
        self.picon_src_layout.setObjectName("picon_src_layout")
        self.picon_src_top_layout = QtWidgets.QHBoxLayout()
        self.picon_src_top_layout.setContentsMargins(6, -1, 6, -1)
        self.picon_src_top_layout.setObjectName("picon_src_top_layout")
        picon_sp_item = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.picon_src_top_layout.addItem(picon_sp_item)
        self.picon_src_filter_edit = QtWidgets.QLineEdit(self.picon_src_widget)
        size_policy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        size_policy.setHorizontalStretch(0)
        size_policy.setVerticalStretch(0)
        size_policy.setHeightForWidth(self.picon_src_filter_edit.sizePolicy().hasHeightForWidth())
        self.picon_src_filter_edit.setSizePolicy(size_policy)
        self.picon_src_filter_edit.setInputMask("")
        self.picon_src_filter_edit.setText("Filter...")
        self.picon_src_filter_edit.setObjectName("picon_src_filter_edit")
        self.picon_src_top_layout.addWidget(self.picon_src_filter_edit)
        self.picon_src_layout.addLayout(self.picon_src_top_layout)
        self.picon_src_view = PiconSrcView(self.picon_src_widget)
        self.picon_src_view.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.picon_src_view.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)
        self.picon_src_view.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.picon_src_view.setObjectName("picon_src_view")
        self.picon_src_layout.addWidget(self.picon_src_view)
        self.picon_layout_widget = QtWidgets.QWidget(self.picon_splitter)
        self.picon_layout_widget.setObjectName("picon_layout_widget")
        self.picon_dst_layout = QtWidgets.QVBoxLayout(self.picon_layout_widget)
        self.picon_dst_layout.setContentsMargins(0, 0, 0, 0)
        self.picon_dst_layout.setObjectName("picon_dst_layout")
        self.picon_dst_top_layout = QtWidgets.QHBoxLayout()
        self.picon_dst_top_layout.setContentsMargins(6, -1, 6, -1)
        self.picon_dst_top_layout.setObjectName("picon_dst_top_layout")
        picon_sp_item2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.picon_dst_top_layout.addItem(picon_sp_item2)
        self.picon_dest_filter_edit = QtWidgets.QLineEdit(self.picon_layout_widget)
        size_policy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        size_policy.setHorizontalStretch(0)
        size_policy.setVerticalStretch(0)
        size_policy.setHeightForWidth(self.picon_dest_filter_edit.sizePolicy().hasHeightForWidth())
        self.picon_dest_filter_edit.setSizePolicy(size_policy)
        self.picon_dest_filter_edit.setObjectName("picon_dest_filter_edit_2")
        self.picon_dst_top_layout.addWidget(self.picon_dest_filter_edit)
        self.picon_dst_layout.addLayout(self.picon_dst_top_layout)
        self.picon_dst_view = PiconDstView(self.picon_layout_widget)
        self.picon_dst_view.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.picon_dst_view.setObjectName("picon_dst_view")
        self.picon_dst_layout.addWidget(self.picon_dst_view)
        self.picon_explorer_layout.addWidget(self.picon_splitter, 0, 0, 1, 1)
        self.picons_stacked_widget.addWidget(self.picon_explorer_page)
        self.picon_downloader_page = QtWidgets.QWidget()
        self.picon_downloader_page.setObjectName("picon_downloader_page")
        self.picons_stacked_widget.addWidget(self.picon_downloader_page)
        self.picon_group_box_layout.addWidget(self.picons_stacked_widget, 0, 0, 1, 1)
        self.picons_page_layout.addWidget(self.picon_group_box, 0, 0, 1, 1)
        self.stacked_widget.addWidget(self.picon_page)
        # ******************** Streams page ******************** #
        self.streams_page = QtWidgets.QWidget()
        self.streams_page.setObjectName("streams_page")
        self.streams_page_layout = QtWidgets.QGridLayout(self.streams_page)
        self.streams_page_layout.setContentsMargins(2, 0, 6, 2)
        self.streams_page_layout.setHorizontalSpacing(2)
        self.streams_page_layout.setObjectName("streams_page_layout")
        self.streams_layout = QtWidgets.QVBoxLayout()
        self.streams_layout.setContentsMargins(-1, 2, -1, -1)
        self.streams_layout.setSpacing(6)
        self.streams_layout.setObjectName("streams_layout")
        # Media widget.
        self.media_widget = QtWidgets.QGraphicsView(self.streams_page)
        self.media_widget.setAutoFillBackground(True)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        self.media_widget.setBackgroundBrush(brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        self.media_widget.setForegroundBrush(brush)
        self.media_widget.setInteractive(True)
        self.media_widget.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.media_widget.setCacheMode(QtWidgets.QGraphicsView.CacheNone)
        self.media_widget.setObjectName("media_widget")
        self.streams_layout.addWidget(self.media_widget)
        # Extra options
        self.media_widget.setAttribute(QtCore.Qt.WA_DontCreateNativeAncestors)
        self.media_widget.setAttribute(QtCore.Qt.WA_NativeWindow)
        self.media_control_layout = QtWidgets.QHBoxLayout()
        self.media_control_layout.setContentsMargins(6, 0, 6, -1)
        self.media_control_layout.setObjectName("media_control_layout")
        self.media_play_tool_button = QtWidgets.QToolButton(self.streams_page)
        size_policy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        size_policy.setHorizontalStretch(0)
        size_policy.setVerticalStretch(0)
        size_policy.setHeightForWidth(self.media_play_tool_button.sizePolicy().hasHeightForWidth())
        self.media_play_tool_button.setSizePolicy(size_policy)
        self.media_play_tool_button.setMinimumSize(QtCore.QSize(32, 0))
        icon = QtGui.QIcon.fromTheme("media-playback-start")
        self.media_play_tool_button.setIcon(icon)
        self.media_play_tool_button.setObjectName("media_play_tool_button")
        self.media_control_layout.addWidget(self.media_play_tool_button)
        self.media_stop_tool_button = QtWidgets.QToolButton(self.streams_page)
        self.media_stop_tool_button.setMinimumSize(QtCore.QSize(32, 0))
        icon = QtGui.QIcon.fromTheme("media-playback-stop")
        self.media_stop_tool_button.setIcon(icon)
        self.media_stop_tool_button.setObjectName("media_stop_tool_button")
        self.media_control_layout.addWidget(self.media_stop_tool_button)
        self.media_info_label = QtWidgets.QLabel(self.streams_page)
        self.media_info_label.setText("")
        self.media_info_label.setObjectName("media_info_label")
        self.media_control_layout.addWidget(self.media_info_label)
        self.media_full_tool_button = QtWidgets.QToolButton(self.streams_page)
        self.media_full_tool_button.setMinimumSize(QtCore.QSize(32, 0))
        icon = QtGui.QIcon.fromTheme("view-fullscreen")
        self.media_full_tool_button.setIcon(icon)
        self.media_full_tool_button.setObjectName("media_full_tool_button")
        self.media_control_layout.addWidget(self.media_full_tool_button)
        self.streams_layout.addLayout(self.media_control_layout)
        self.streams_page_layout.addLayout(self.streams_layout, 0, 0, 1, 1)
        self.stacked_widget.addWidget(self.streams_page)
        # ******************** EPG page ******************** #
        self.epg_page = QtWidgets.QWidget()
        self.epg_page.setObjectName("epg_page")
        self.epg_page_layout = QtWidgets.QGridLayout(self.epg_page)
        self.epg_page_layout.setContentsMargins(2, 0, 6, 0)
        self.epg_page_layout.setVerticalSpacing(6)
        self.epg_page_layout.setObjectName("epg_page_layout")
        self.epg_group_box = QtWidgets.QGroupBox(self.epg_page)
        self.epg_group_box.setObjectName("epg_group_box")
        self.epg_group_box_layout = QtWidgets.QVBoxLayout(self.epg_group_box)
        self.epg_group_box_layout.setContentsMargins(0, 6, 0, 2)
        self.epg_group_box_layout.setObjectName("epg_group_box_layout")
        self.epg_header_layout = QtWidgets.QHBoxLayout()
        self.epg_header_layout.setContentsMargins(6, -1, 6, -1)
        self.epg_header_layout.setObjectName("epg_header_layout")
        epg_spacer_item = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.epg_header_layout.addItem(epg_spacer_item)
        self.epg_search_edit = QtWidgets.QLineEdit(self.epg_group_box)
        size_policy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        size_policy.setHorizontalStretch(0)
        size_policy.setVerticalStretch(0)
        size_policy.setHeightForWidth(self.epg_search_edit.sizePolicy().hasHeightForWidth())
        self.epg_search_edit.setSizePolicy(size_policy)
        self.epg_search_edit.setObjectName("epg_search_edit")
        self.epg_header_layout.addWidget(self.epg_search_edit)
        self.epg_group_box_layout.addLayout(self.epg_header_layout)
        self.epg_view = EpgView(self.epg_group_box)
        self.epg_group_box_layout.addWidget(self.epg_view)
        self.epg_page_layout.addWidget(self.epg_group_box, 0, 0, 1, 1)
        self.stacked_widget.addWidget(self.epg_page)
        # ******************** Timer page ******************** #
        self.timer_page = QtWidgets.QWidget()
        self.timer_page.setObjectName("timer_page")
        self.timer_page_layout = QtWidgets.QGridLayout(self.timer_page)
        self.timer_page_layout.setContentsMargins(2, 0, 2, 2)
        self.timer_page_layout.setObjectName("timer_page_layout")
        self.timer_group_box = QtWidgets.QGroupBox(self.timer_page)
        self.timer_group_box.setObjectName("timer_group_box")
        self.timer_group_box_layout = QtWidgets.QHBoxLayout(self.timer_group_box)
        self.timer_group_box_layout.setContentsMargins(0, 0, 0, 0)
        self.timer_group_box_layout.setObjectName("timer_broup_box_layout")
        # Edit
        self.timer_edit_box = QtWidgets.QGroupBox(self.timer_group_box)
        self.timer_edit_box.setObjectName("timer_edit_box")
        self.timer_edit_box.setVisible(False)
        self.timer_edit_gruop_box = QtWidgets.QFormLayout(self.timer_edit_box)
        self.timer_edit_gruop_box.setContentsMargins(9, 0, 9, 0)
        self.timer_edit_gruop_box.setObjectName("timer_edit_gruop_box")
        self.timer_enable_widget = QtWidgets.QWidget(self.timer_edit_box)
        self.timer_enable_widget.setObjectName("timer_enable_widget")
        self.timer_edit_enable_box = QtWidgets.QHBoxLayout(self.timer_enable_widget)
        self.timer_edit_enable_box.setContentsMargins(0, 0, 20, 0)
        self.timer_edit_enable_box.setObjectName("timer_edit_enable_box")
        timer_sp_item = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.timer_edit_enable_box.addItem(timer_sp_item)
        self.timer_enable_button = QtWidgets.QToolButton(self.timer_enable_widget)
        self.timer_enable_button.setMinimumSize(QtCore.QSize(85, 0))
        self.timer_enable_button.setCheckable(True)
        self.timer_enable_button.setObjectName("timer_enable_button")
        self.timer_edit_enable_box.addWidget(self.timer_enable_button)
        self.timer_edit_gruop_box.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.timer_enable_widget)
        self.timer_name_label = QtWidgets.QLabel(self.timer_edit_box)
        self.timer_name_label.setObjectName("timer_name_label")
        self.timer_edit_gruop_box.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.timer_name_label)
        self.timer_name_edit = QtWidgets.QLineEdit(self.timer_edit_box)
        self.timer_name_edit.setObjectName("timer_name_edit")
        self.timer_edit_gruop_box.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.timer_name_edit)
        self.timer_description_label = QtWidgets.QLabel(self.timer_edit_box)
        self.timer_description_label.setObjectName("timer_description_label")
        self.timer_edit_gruop_box.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.timer_description_label)
        self.timer_description_edit = QtWidgets.QLineEdit(self.timer_edit_box)
        self.timer_description_edit.setObjectName("timer_description_edit")
        self.timer_edit_gruop_box.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.timer_description_edit)
        self.timer_service_label = QtWidgets.QLabel(self.timer_edit_box)
        self.timer_service_label.setObjectName("timer_service_label")
        self.timer_edit_gruop_box.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.timer_service_label)
        self.timer_service_edit = QtWidgets.QLineEdit(self.timer_edit_box)
        self.timer_service_edit.setObjectName("timer_service_edit")
        self.timer_edit_gruop_box.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.timer_service_edit)
        self.timer_service_ref_label = QtWidgets.QLabel(self.timer_edit_box)
        self.timer_service_ref_label.setObjectName("timer_service_ref_label")
        self.timer_edit_gruop_box.setWidget(4, QtWidgets.QFormLayout.LabelRole, self.timer_service_ref_label)
        self.timer_ref_edit = QtWidgets.QLineEdit(self.timer_edit_box)
        self.timer_ref_edit.setObjectName("timer_ref_edit")
        self.timer_edit_gruop_box.setWidget(4, QtWidgets.QFormLayout.FieldRole, self.timer_ref_edit)
        self.timer_event_id_label = QtWidgets.QLabel(self.timer_edit_box)
        self.timer_event_id_label.setObjectName("timer_event_id_label")
        self.timer_edit_gruop_box.setWidget(5, QtWidgets.QFormLayout.LabelRole, self.timer_event_id_label)
        self.timer_event_id_edit = QtWidgets.QLineEdit(self.timer_edit_box)
        self.timer_event_id_edit.setObjectName("timer_event_id_edit")
        self.timer_edit_gruop_box.setWidget(5, QtWidgets.QFormLayout.FieldRole, self.timer_event_id_edit)
        self.timer_begins_label = QtWidgets.QLabel(self.timer_edit_box)
        self.timer_begins_label.setObjectName("timer_begins_label")
        self.timer_edit_gruop_box.setWidget(6, QtWidgets.QFormLayout.LabelRole, self.timer_begins_label)
        self.timer_begins_edit = QtWidgets.QLineEdit(self.timer_edit_box)
        self.timer_begins_edit.setObjectName("timer_begins_edit")
        self.timer_edit_gruop_box.setWidget(6, QtWidgets.QFormLayout.FieldRole, self.timer_begins_edit)
        self.timer_ends_label = QtWidgets.QLabel(self.timer_edit_box)
        self.timer_ends_label.setObjectName("timer_ends_label")
        self.timer_edit_gruop_box.setWidget(7, QtWidgets.QFormLayout.LabelRole, self.timer_ends_label)
        self.timer_ends_edit = QtWidgets.QLineEdit(self.timer_edit_box)
        self.timer_ends_edit.setObjectName("timer_ends_edit")
        self.timer_edit_gruop_box.setWidget(7, QtWidgets.QFormLayout.FieldRole, self.timer_ends_edit)
        self.timer_repeated_label = QtWidgets.QLabel(self.timer_edit_box)
        self.timer_repeated_label.setObjectName("timer_repeated_label")
        self.timer_edit_gruop_box.setWidget(8, QtWidgets.QFormLayout.LabelRole, self.timer_repeated_label)
        self.timer_repeated_grid = QtWidgets.QGridLayout()
        self.timer_repeated_grid.setContentsMargins(0, -1, 9, -1)
        self.timer_repeated_grid.setVerticalSpacing(0)
        self.timer_repeated_grid.setObjectName("timer_repeated_grid")
        self.timer_th_label = QtWidgets.QLabel(self.timer_edit_box)
        self.timer_th_label.setAlignment(QtCore.Qt.AlignCenter)
        self.timer_th_label.setObjectName("timer_th_label")
        self.timer_repeated_grid.addWidget(self.timer_th_label, 0, 3, 1, 1)
        self.timer_su_label = QtWidgets.QLabel(self.timer_edit_box)
        self.timer_su_label.setAlignment(QtCore.Qt.AlignCenter)
        self.timer_su_label.setObjectName("timer_su_label")
        self.timer_repeated_grid.addWidget(self.timer_su_label, 0, 6, 1, 1)
        self.timer_tu_label = QtWidgets.QLabel(self.timer_edit_box)
        self.timer_tu_label.setAlignment(QtCore.Qt.AlignCenter)
        self.timer_tu_label.setObjectName("timer_tu_label")
        self.timer_repeated_grid.addWidget(self.timer_tu_label, 0, 1, 1, 1)
        self.timer_sa_label = QtWidgets.QLabel(self.timer_edit_box)
        self.timer_sa_label.setAlignment(QtCore.Qt.AlignCenter)
        self.timer_sa_label.setObjectName("timer_sa_label")
        self.timer_repeated_grid.addWidget(self.timer_sa_label, 0, 5, 1, 1)
        self.timer_mo_label = QtWidgets.QLabel(self.timer_edit_box)
        self.timer_mo_label.setAlignment(QtCore.Qt.AlignCenter)
        self.timer_mo_label.setObjectName("timer_mo_label")
        self.timer_repeated_grid.addWidget(self.timer_mo_label, 0, 0, 1, 1)
        self.timer_we_label = QtWidgets.QLabel(self.timer_edit_box)
        self.timer_we_label.setAlignment(QtCore.Qt.AlignCenter)
        self.timer_we_label.setObjectName("timer_we_label")
        self.timer_repeated_grid.addWidget(self.timer_we_label, 0, 2, 1, 1)
        self.timer_fr_label = QtWidgets.QLabel(self.timer_edit_box)
        self.timer_fr_label.setAlignment(QtCore.Qt.AlignCenter)
        self.timer_fr_label.setObjectName("timer_fr_label")
        self.timer_repeated_grid.addWidget(self.timer_fr_label, 0, 4, 1, 1)
        self.timer_mo_check_box = QtWidgets.QCheckBox(self.timer_edit_box)
        self.timer_mo_check_box.setObjectName("timer_mo_check_box")
        self.timer_repeated_grid.addWidget(self.timer_mo_check_box, 1, 0, 1, 1)
        self.timer_tu_check_box = QtWidgets.QCheckBox(self.timer_edit_box)
        self.timer_tu_check_box.setObjectName("timer_tu_check_box")
        self.timer_repeated_grid.addWidget(self.timer_tu_check_box, 1, 1, 1, 1)
        self.timer_we_check_box = QtWidgets.QCheckBox(self.timer_edit_box)
        self.timer_we_check_box.setObjectName("timer_we_check_box")
        self.timer_repeated_grid.addWidget(self.timer_we_check_box, 1, 2, 1, 1)
        self.timer_th_check_box = QtWidgets.QCheckBox(self.timer_edit_box)
        self.timer_th_check_box.setObjectName("timer_th_check_box")
        self.timer_repeated_grid.addWidget(self.timer_th_check_box, 1, 3, 1, 1)
        self.timer_fr_check_box = QtWidgets.QCheckBox(self.timer_edit_box)
        self.timer_fr_check_box.setObjectName("timer_fr_check_box")
        self.timer_repeated_grid.addWidget(self.timer_fr_check_box, 1, 4, 1, 1)
        self.timer_sa_check_box = QtWidgets.QCheckBox(self.timer_edit_box)
        self.timer_sa_check_box.setObjectName("timer_sa_check_box")
        self.timer_repeated_grid.addWidget(self.timer_sa_check_box, 1, 5, 1, 1)
        self.timer_su_check_box = QtWidgets.QCheckBox(self.timer_edit_box)
        self.timer_su_check_box.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.timer_su_check_box.setText("")
        self.timer_su_check_box.setObjectName("timer_su_check_box")
        self.timer_repeated_grid.addWidget(self.timer_su_check_box, 1, 6, 1, 1)
        self.timer_edit_gruop_box.setLayout(8, QtWidgets.QFormLayout.FieldRole, self.timer_repeated_grid)
        self.timer_action_label = QtWidgets.QLabel(self.timer_edit_box)
        self.timer_action_label.setObjectName("timer_action_label")
        self.timer_edit_gruop_box.setWidget(9, QtWidgets.QFormLayout.LabelRole, self.timer_action_label)
        self.timer_action_combo_box = QtWidgets.QComboBox(self.timer_edit_box)
        self.timer_action_combo_box.setObjectName("timer_action_combo_box")
        self.timer_edit_gruop_box.setWidget(9, QtWidgets.QFormLayout.FieldRole, self.timer_action_combo_box)
        self.timer_after_event_label = QtWidgets.QLabel(self.timer_edit_box)
        self.timer_after_event_label.setObjectName("timer_after_event_label")
        self.timer_edit_gruop_box.setWidget(10, QtWidgets.QFormLayout.LabelRole, self.timer_after_event_label)
        self.timer_after_event_combo_box = QtWidgets.QComboBox(self.timer_edit_box)
        self.timer_after_event_combo_box.setObjectName("timer_after_event_combo_box")
        self.timer_edit_gruop_box.setWidget(10, QtWidgets.QFormLayout.FieldRole, self.timer_after_event_combo_box)
        self.timer_location_label = QtWidgets.QLabel(self.timer_edit_box)
        self.timer_location_label.setObjectName("timer_location_label")
        self.timer_edit_gruop_box.setWidget(11, QtWidgets.QFormLayout.LabelRole, self.timer_location_label)
        self.timer_location_combo_box = QtWidgets.QComboBox(self.timer_edit_box)
        self.timer_location_combo_box.setObjectName("timer_location_combo_box")
        self.timer_edit_gruop_box.setWidget(11, QtWidgets.QFormLayout.FieldRole, self.timer_location_combo_box)
        self.timer_edit_button_box = QtWidgets.QDialogButtonBox(self.timer_edit_box)
        self.timer_edit_button_box.setStandardButtons(
            QtWidgets.QDialogButtonBox.Cancel | QtWidgets.QDialogButtonBox.Save)
        self.timer_edit_button_box.setObjectName("timer_edit_button_box")
        self.timer_edit_gruop_box.setWidget(12, QtWidgets.QFormLayout.FieldRole, self.timer_edit_button_box)
        self.timer_group_box_layout.addWidget(self.timer_edit_box)
        # View
        self.timer_view_layout = QtWidgets.QVBoxLayout()
        self.timer_view_layout.setContentsMargins(-1, 6, -1, -1)
        self.timer_view_layout.setObjectName("timer_view_layout")
        self.timer_view_header_layout = QtWidgets.QHBoxLayout()
        self.timer_view_header_layout.setContentsMargins(6, -1, 6, -1)
        self.timer_view_header_layout.setObjectName("timer_view_header_layout")
        self.timer_add_button = QtWidgets.QToolButton(self.timer_group_box)
        self.timer_add_button.setMinimumSize(QtCore.QSize(32, 0))
        icon = QtGui.QIcon.fromTheme("add")
        self.timer_add_button.setIcon(icon)
        self.timer_add_button.setObjectName("timer_add_button")
        self.timer_view_header_layout.addWidget(self.timer_add_button)
        self.timer_remove_button = QtWidgets.QToolButton(self.timer_group_box)
        self.timer_remove_button.setMinimumSize(QtCore.QSize(32, 0))
        icon = QtGui.QIcon.fromTheme("remove")
        self.timer_remove_button.setIcon(icon)
        self.timer_remove_button.setObjectName("timer_remove_button")
        self.timer_view_header_layout.addWidget(self.timer_remove_button)
        timer_sp_item2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.timer_view_header_layout.addItem(timer_sp_item2)
        self.timer_search_edit = QtWidgets.QLineEdit(self.timer_group_box)
        self.timer_search_edit.setObjectName("timer_search_edit")
        size_policy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        size_policy.setHorizontalStretch(0)
        size_policy.setVerticalStretch(0)
        size_policy.setHeightForWidth(self.timer_search_edit.sizePolicy().hasHeightForWidth())
        self.timer_search_edit.setSizePolicy(size_policy)
        self.timer_view_header_layout.addWidget(self.timer_search_edit)
        self.timer_view_layout.addLayout(self.timer_view_header_layout)
        self.timer_view = TimerView(self.timer_group_box)
        self.timer_view_layout.addWidget(self.timer_view)
        self.timer_group_box_layout.addLayout(self.timer_view_layout)
        self.timer_page_layout.addWidget(self.timer_group_box, 0, 0, 1, 1)
        self.stacked_widget.addWidget(self.timer_page)
        # ******************** FTP page ******************** #
        self.ftp_page = QtWidgets.QWidget()
        self.ftp_page.setObjectName("ftp_page")
        self.ftp_page_layout = QtWidgets.QGridLayout(self.ftp_page)
        self.ftp_page_layout.setContentsMargins(2, 0, 9, 2)
        self.ftp_page_layout.setObjectName("ftp_page_layout")
        self.ftp_splitter = QtWidgets.QSplitter(self.ftp_page)
        self.ftp_splitter.setOrientation(QtCore.Qt.Horizontal)
        self.ftp_splitter.setObjectName("ftp_splitter")
        self.ftp_src_group_box = QtWidgets.QGroupBox(self.ftp_splitter)
        self.ftp_src_group_box.setObjectName("ftp_src_group_box")
        self.ftp_src_group_box_layout = QtWidgets.QVBoxLayout(self.ftp_src_group_box)
        self.ftp_src_group_box_layout.setContentsMargins(0, 0, 0, 0)
        self.ftp_src_group_box_layout.setObjectName("ftp_src_group_box_layout")
        self.ftp_src_top_layout = QtWidgets.QHBoxLayout()
        self.ftp_src_top_layout.setObjectName("ftp_src_top_layout")
        self.ftp_src_status_label = QtWidgets.QLabel(self.ftp_src_group_box)
        self.ftp_src_status_label.setObjectName("ftp_src_status_label")
        self.ftp_src_top_layout.addWidget(self.ftp_src_status_label)
        ftp_spacer_item = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.ftp_src_top_layout.addItem(ftp_spacer_item)
        self.ftp_src_group_box_layout.addLayout(self.ftp_src_top_layout)
        self.ftp_src_view = FtpView(self.ftp_src_group_box)
        self.ftp_src_view.setObjectName("ftp_src_view")
        self.ftp_src_group_box_layout.addWidget(self.ftp_src_view)
        self.ftp_dest_group_box = QtWidgets.QGroupBox(self.ftp_splitter)
        self.ftp_dest_group_box.setObjectName("ftp_dest_group_box")
        self.ftp_dest_group_box_layout = QtWidgets.QVBoxLayout(self.ftp_dest_group_box)
        self.ftp_dest_group_box_layout.setContentsMargins(0, 0, 0, 0)
        self.ftp_dest_group_box_layout.setObjectName("ftp_dest_group_box_layout")
        self.ftp_dest_top_layout = QtWidgets.QHBoxLayout()
        self.ftp_dest_top_layout.setObjectName("ftp_dest_top_layout")
        self.ftp_dest_status_label = QtWidgets.QLabel(self.ftp_dest_group_box)
        self.ftp_dest_status_label.setObjectName("ftp_dest_status_label")
        self.ftp_dest_top_layout.addWidget(self.ftp_dest_status_label)
        ftp_spacer_item2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.ftp_dest_top_layout.addItem(ftp_spacer_item2)
        self.ftp_dest_group_box_layout.addLayout(self.ftp_dest_top_layout)
        self.ftp_dest_view = FileView(self.ftp_dest_group_box)
        self.ftp_dest_group_box_layout.addWidget(self.ftp_dest_view)
        self.ftp_page_layout.addWidget(self.ftp_splitter, 0, 0, 1, 1)
        self.stacked_widget.addWidget(self.ftp_page)
        # ******************** Logo page ******************** #
        self.logo_page = QtWidgets.QWidget()
        self.logo_page.setObjectName("logo_page")
        self.stacked_widget.addWidget(self.logo_page)
        # ******************** Left (FAV) side of the main window.  ******************** #
        self.fav_splitter = QtWidgets.QSplitter(self.main_splitter)
        size_policy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        size_policy.setHorizontalStretch(0)
        size_policy.setVerticalStretch(0)
        size_policy.setHeightForWidth(self.fav_splitter.sizePolicy().hasHeightForWidth())
        self.fav_splitter.setSizePolicy(size_policy)
        self.fav_splitter.setOrientation(QtCore.Qt.Vertical)
        self.fav_splitter.setOpaqueResize(True)
        self.fav_splitter.setHandleWidth(6)
        self.fav_splitter.setObjectName("fav_splitter")
        self.fav_group_box = QtWidgets.QGroupBox(self.fav_splitter)
        self.fav_group_box.setObjectName("fav_group_box")
        self.fav_layout = QtWidgets.QGridLayout(self.fav_group_box)
        self.fav_layout.setContentsMargins(2, 6, 2, 2)
        self.fav_layout.setVerticalSpacing(6)
        self.fav_layout.setObjectName("fav_layout")
        self.fav_view = FavView(self.fav_group_box)
        self.fav_layout.addWidget(self.fav_view, 3, 1, 1, 1)
        self.fav_h_layout = QtWidgets.QHBoxLayout()
        self.fav_h_layout.setContentsMargins(6, -1, 6, -1)
        self.fav_h_layout.setObjectName("fav_h_layout")
        self.fav_menu_button = QtWidgets.QToolButton(self.fav_group_box)
        self.fav_menu_button.setMinimumSize(QtCore.QSize(64, 24))
        self.fav_menu_button.setText("IPTV")
        self.fav_menu_button.setPopupMode(QtWidgets.QToolButton.InstantPopup)
        self.fav_menu_button.setArrowType(QtCore.Qt.NoArrow)
        self.fav_menu_button.setObjectName("fav_menu_button")
        self.fav_h_layout.addWidget(self.fav_menu_button)
        fav_spacer_item = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.fav_h_layout.addItem(fav_spacer_item)
        self.bq_service_search_edit = QtWidgets.QLineEdit(self.fav_group_box)
        size_policy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        size_policy.setHorizontalStretch(0)
        size_policy.setVerticalStretch(0)
        size_policy.setHeightForWidth(self.bq_service_search_edit.sizePolicy().hasHeightForWidth())
        self.bq_service_search_edit.setSizePolicy(size_policy)
        self.bq_service_search_edit.setInputMask("")
        self.bq_service_search_edit.setText("")
        self.bq_service_search_edit.setObjectName("bq_service_search_edit")
        self.fav_h_layout.addWidget(self.bq_service_search_edit)
        self.fav_layout.addLayout(self.fav_h_layout, 0, 1, 1, 1)
        self.bouquets_group_box = QtWidgets.QGroupBox(self.fav_splitter)
        self.bouquets_group_box.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.bouquets_group_box.setObjectName("bouquets_group_box")
        self.bouquets_top_layout = QtWidgets.QGridLayout(self.bouquets_group_box)
        self.bouquets_top_layout.setContentsMargins(2, 6, 2, 2)
        self.bouquets_top_layout.setVerticalSpacing(6)
        self.bouquets_top_layout.setObjectName("bouquets_top_layout")
        self.bouquets_view = BouquetsView(self.bouquets_group_box)
        self.bouquets_top_layout.addWidget(self.bouquets_view, 3, 0, 1, 1)
        self.bq_h_layout = QtWidgets.QHBoxLayout()
        self.bq_h_layout.setContentsMargins(6, -1, 6, -1)
        self.bq_h_layout.setObjectName("bq_h_layout")
        self.add_bouquet_button = QtWidgets.QToolButton(self.bouquets_group_box)
        self.add_bouquet_button.setMinimumSize(QtCore.QSize(32, 0))
        icon = QtGui.QIcon.fromTheme("document-new")
        self.add_bouquet_button.setIcon(icon)
        self.add_bouquet_button.setAutoRaise(False)
        self.add_bouquet_button.setObjectName("add_bouquet_button")
        self.bq_h_layout.addWidget(self.add_bouquet_button)
        fav_spacer_item2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.bq_h_layout.addItem(fav_spacer_item2)
        self.bouquets_top_layout.addLayout(self.bq_h_layout, 0, 0, 1, 1)
        self.main_frame_layout.addWidget(self.main_splitter, 0, 0, 1, 1)
        self.central_widget_layout.addWidget(self.main_frame, 1, 0, 1, 1)
        self.log_text_browser = QtWidgets.QTextBrowser(self.central_widget)
        self.log_text_browser.setMinimumSize(QtCore.QSize(0, 100))
        self.log_text_browser.setMaximumSize(QtCore.QSize(16777215, 250))
        self.log_text_browser.setObjectName("log_text_browser")
        self.central_widget_layout.addWidget(self.log_text_browser, 2, 0, 1, 1)
        self.setCentralWidget(self.central_widget)
        # ******************** Menu bar ******************** #
        self.menu_bar = QtWidgets.QMenuBar(self)
        self.menu_bar.setGeometry(QtCore.QRect(0, 0, 1087, 22))
        self.menu_bar.setObjectName("menu_bar")
        # File menu.
        self.file_menu = QtWidgets.QMenu(self.menu_bar)
        self.file_menu.setObjectName("file_menu")
        self.help_menu = QtWidgets.QMenu(self.menu_bar)
        self.help_menu.setObjectName("help_menu")
        self.settings_menu = QtWidgets.QMenu(self.menu_bar)
        self.settings_menu.setObjectName("settings_menu")
        self.language_menu = QtWidgets.QMenu(self.settings_menu)
        icon = QtGui.QIcon.fromTheme("locale")
        self.language_menu.setIcon(icon)
        self.language_menu.setObjectName("language_menu")
        self.view_menu = QtWidgets.QMenu(self.menu_bar)
        self.view_menu.setObjectName("view_menu")
        self.tools_menu = QtWidgets.QMenu(self.view_menu)
        icon = QtGui.QIcon.fromTheme("system-run")
        self.tools_menu.setIcon(icon)
        self.tools_menu.setObjectName("tools_menu")
        self.setMenuBar(self.menu_bar)
        self.open_action = QtWidgets.QAction(self)
        icon = QtGui.QIcon.fromTheme("folder-open")
        self.open_action.setIcon(icon)
        self.open_action.setObjectName("open_action")
        self.exit_action = QtWidgets.QAction(self)
        icon = QtGui.QIcon.fromTheme("application-exit")
        self.exit_action.setIcon(icon)
        self.exit_action.setObjectName("exit_action")
        self.settings_action = QtWidgets.QAction(self)
        icon = QtGui.QIcon.fromTheme("settings")
        self.settings_action.setIcon(icon)
        self.settings_action.setObjectName("settings_action")
        self.menu_action_search = QtWidgets.QAction(self)
        self.menu_action_search.setCheckable(True)
        self.menu_action_search.setChecked(True)
        self.menu_action_search.setObjectName("menu_action_search")
        self.menu_action_filter = QtWidgets.QAction(self)
        self.menu_action_filter.setCheckable(True)
        self.menu_action_filter.setChecked(True)
        self.menu_action_filter.setObjectName("menu_action_filter")
        self.import_action = QtWidgets.QAction(self)
        icon = QtGui.QIcon.fromTheme("folder-open")
        self.import_action.setIcon(icon)
        self.import_action.setObjectName("import_action")
        self.extract_action = QtWidgets.QAction(self)
        icon = QtGui.QIcon.fromTheme("archive")
        self.extract_action.setIcon(icon)
        self.extract_action.setObjectName("extract_action")
        self.about_action = QtWidgets.QAction(self)
        icon = QtGui.QIcon.fromTheme("help-about")
        self.about_action.setIcon(icon)
        self.about_action.setObjectName("about_action")
        self.english_lang_action = QtWidgets.QAction(self)
        self.english_lang_action.setCheckable(True)
        self.english_lang_action.setChecked(True)
        self.english_lang_action.setObjectName("english_lang_action")
        self.bouquets_action = QtWidgets.QAction(self)
        self.bouquets_action.setCheckable(True)
        self.bouquets_action.setChecked(True)
        self.bouquets_action.setObjectName("bouquets_action")
        self.satellites_action = QtWidgets.QAction(self)
        self.satellites_action.setCheckable(True)
        self.satellites_action.setChecked(True)
        self.satellites_action.setObjectName("satellites_action")
        self.picons_action = QtWidgets.QAction(self)
        self.picons_action.setCheckable(True)
        self.picons_action.setChecked(True)
        self.picons_action.setObjectName("picons_action")
        self.epg_action = QtWidgets.QAction(self)
        self.epg_action.setCheckable(True)
        self.epg_action.setChecked(True)
        self.epg_action.setObjectName("epg_action")
        self.timer_action = QtWidgets.QAction(self)
        self.timer_action.setCheckable(True)
        self.timer_action.setChecked(True)
        self.timer_action.setObjectName("timer_action")
        self.ftp_action = QtWidgets.QAction(self)
        self.ftp_action.setCheckable(True)
        self.ftp_action.setEnabled(False)
        self.ftp_action.setObjectName("ftp_action")
        self.logo_action = QtWidgets.QAction(self)
        self.logo_action.setCheckable(True)
        self.logo_action.setEnabled(False)
        self.logo_action.setObjectName("logo_action")
        self.log_action = QtWidgets.QAction(self)
        self.log_action.setCheckable(True)
        self.log_action.setObjectName("log_action")
        self.file_menu.addAction(self.import_action)
        self.file_menu.addAction(self.open_action)
        self.file_menu.addAction(self.extract_action)
        self.file_menu.addSeparator()
        self.file_menu.addAction(self.exit_action)
        self.help_menu.addAction(self.about_action)
        self.settings_menu.addAction(self.settings_action)
        self.settings_menu.addSeparator()
        self.settings_menu.addAction(self.language_menu.menuAction())
        self.tools_menu.addAction(self.bouquets_action)
        self.tools_menu.addAction(self.satellites_action)
        self.tools_menu.addAction(self.picons_action)
        self.tools_menu.addAction(self.epg_action)
        self.tools_menu.addAction(self.timer_action)
        self.tools_menu.addAction(self.ftp_action)
        self.tools_menu.addAction(self.logo_action)
        self.view_menu.addAction(self.log_action)
        self.view_menu.addSeparator()
        self.view_menu.addAction(self.tools_menu.menuAction())
        self.menu_bar.addAction(self.file_menu.menuAction())
        self.menu_bar.addAction(self.view_menu.menuAction())
        self.menu_bar.addAction(self.settings_menu.menuAction())
        self.menu_bar.addAction(self.help_menu.menuAction())
        # ******************** Status bar ******************** #
        self.status_bar = QtWidgets.QStatusBar(self)
        self.status_bar.setObjectName("status_bar")
        self.setStatusBar(self.status_bar)
        # ******************** Popups ******************** #
        # FAV tools menu.
        self.fav_tools_menu = QtWidgets.QMenu("Tools", self.fav_menu_button)
        self.add_stream_action = QtWidgets.QAction("Add IPTV or stream service", self.fav_tools_menu)
        self.add_stream_action.setIcon(QtGui.QIcon.fromTheme("emblem-shared"))
        self.fav_tools_menu.addAction(self.add_stream_action)
        self.import_m3u_action = QtWidgets.QAction("Import *m3u", self.fav_tools_menu)
        self.import_m3u_action.setIcon(QtGui.QIcon.fromTheme("insert-link"))
        self.fav_tools_menu.addAction(self.import_m3u_action)
        self.fav_menu_button.setMenu(self.fav_tools_menu)
        # Translation
        self.retranslate_ui(self)
        # Startup
        self.stacked_widget.setCurrentIndex(0)
        self.picons_stacked_widget.setCurrentIndex(0)
        self.log_text_browser.setVisible(False)
        # Current stack page
        self.current_page = Page.BOUQUETS
        # Actions.
        self.bouquets_action.toggled['bool'].connect(self.bouquet_tool_button.setVisible)
        self.satellites_action.toggled['bool'].connect(self.satellite_tool_button.setVisible)
        self.picons_action.toggled['bool'].connect(self.picon_tool_button.setVisible)
        self.epg_action.toggled['bool'].connect(self.epg_tool_button.setVisible)
        self.timer_action.toggled['bool'].connect(self.timer_tool_button.setVisible)
        self.ftp_action.toggled['bool'].connect(self.ftp_tool_button.setVisible)
        self.logo_action.toggled['bool'].connect(self.logo_tool_button.setVisible)
        self.log_action.toggled['bool'].connect(self.log_text_browser.setVisible)
        self.satellite_update_tool_button.toggled['bool'].connect(self.satellite_update_box.setVisible)
        QtCore.QMetaObject.connectSlotsByName(self)
        # Toolbar.
        self.bouquet_tool_button.toggled.connect(lambda s: self.on_stack_page_changed(s, Page.BOUQUETS))
        self.satellite_tool_button.toggled.connect(lambda s: self.on_stack_page_changed(s, Page.SAT))
        self.picon_tool_button.toggled.connect(lambda s: self.on_stack_page_changed(s, Page.PICONS))
        self.streams_tool_button.toggled.connect(lambda s: self.on_stack_page_changed(s, Page.STREAMS))
        self.epg_tool_button.toggled.connect(lambda s: self.on_stack_page_changed(s, Page.EPG))
        self.timer_tool_button.toggled.connect(lambda s: self.on_stack_page_changed(s, Page.TIMER))
        self.ftp_tool_button.toggled.connect(lambda s: self.on_stack_page_changed(s, Page.FTP))
        self.logo_tool_button.toggled.connect(lambda s: self.on_stack_page_changed(s, Page.LOGO))
        # Stack pages.
        self.stacked_widget.currentChanged.connect(self.on_current_page_changed)
        # Disabled items!!!
        self.logo_tool_button.setVisible(False)
        self.control_tool_button.setEnabled(False)
        self.ftp_tool_button.setVisible(False)
        self.satellite_update_box.setVisible(False)
        self.picon_src_widget.setVisible(False)

    # ******************** Handlers ******************** #

    def retranslate_ui(self, main_window):
        _translate = QtCore.QCoreApplication.translate
        main_window.setWindowTitle(_translate("MainWindow", "E2Toolkit"))
        # Tool bar.
        self.profile_combo_box.setToolTip(_translate("MainWindow", "Profile"))
        self.download_tool_button.setToolTip(_translate("MainWindow", "Receive files from the receiver"))
        self.download_tool_button.setText(_translate("MainWindow", "Receive"))
        self.upload_tool_button.setToolTip(_translate("MainWindow", "Send files to the receiver"))
        self.upload_tool_button.setText(_translate("MainWindow", "Send"))
        self.bouquet_tool_button.setText(_translate("MainWindow", "Bouquets"))
        self.satellite_tool_button.setText(_translate("MainWindow", "Satellites"))
        self.picon_tool_button.setText(_translate("MainWindow", "Picons"))
        self.streams_tool_button.setText(_translate("MainWindow", "Streams"))
        self.epg_tool_button.setText(_translate("MainWindow", "EPG"))
        self.timer_tool_button.setText(_translate("MainWindow", "Timer"))
        self.ftp_tool_button.setText(_translate("MainWindow", "FTP"))
        self.logo_tool_button.setText(_translate("MainWindow", "Logo"))
        self.control_tool_button.setText(_translate("MainWindow", "Control"))
        # Services.
        self.services_group_box.setTitle(_translate("MainWindow", "Services"))
        self.filter_free_button.setToolTip(_translate("MainWindow", "Only free"))
        self.filter_free_button.setText(_translate("MainWindow", " Free"))
        self.service_filter_edit.setToolTip(_translate("MainWindow", "Filter"))
        self.service_search_edit.setToolTip(_translate("MainWindow", "Search text"))
        self.service_search_edit.setPlaceholderText(_translate("MainWindow", "Search..."))
        self.tv_label.setText(_translate("MainWindow", "TV:"))
        self.radio_label.setText(_translate("MainWindow", "Radio:"))
        self.data_label.setText(_translate("MainWindow", "Data:"))
        # Satellites page.
        self.satellites_group_box.setTitle(_translate("MainWindow", "Satellites"))
        self.satellite_save_tool_button.setText(_translate("MainWindow", "Save"))
        self.satellite_update_tool_button.setText(_translate("MainWindow", "Update"))
        self.satellite_search_edit.setPlaceholderText(_translate("MainWindow", "Search..."))
        self.satellite_label.setText(_translate("MainWindow", "Satellites:"))
        self.satellite_update_box.setTitle(_translate("MainWindow", "Satellite update"))
        self.satellite_download_button.setText(_translate("MainWindow", "Download"))
        self.satellite_update_search_edit.setPlaceholderText(_translate("MainWindow", "Search..."))
        self.satellite_update_label.setText(_translate("MainWindow", "Satellites:"))
        # Picons page.
        self.picon_group_box.setTitle(_translate("MainWindow", "Picons"))
        self.picon_src_filter_edit.setPlaceholderText(_translate("MainWindow", "Search..."))
        self.picon_dest_filter_edit.setText(_translate("MainWindow", "Filter..."))
        # Streams page.
        self.media_play_tool_button.setText(_translate("MainWindow", "Play"))
        self.media_stop_tool_button.setText(_translate("MainWindow", "Stop"))
        self.media_full_tool_button.setText(_translate("MainWindow", "Fullscreen"))
        # EPG page.
        self.epg_group_box.setTitle(_translate("MainWindow", "EPG"))
        self.epg_search_edit.setPlaceholderText(_translate("MainWindow", "Search..."))
        # Timer page.
        self.timer_group_box.setTitle(_translate("MainWindow", "Timers"))
        self.timer_enable_button.setText(_translate("MainWindow", "Enabled"))
        self.timer_name_label.setText(_translate("MainWindow", "Name:"))
        self.timer_description_label.setText(_translate("MainWindow", "Description:"))
        self.timer_service_label.setText(_translate("MainWindow", "Service:"))
        self.timer_service_ref_label.setText(_translate("MainWindow", "Service reference:"))
        self.timer_event_id_label.setText(_translate("MainWindow", "Event ID:"))
        self.timer_begins_label.setText(_translate("MainWindow", "Begins:"))
        self.timer_ends_label.setText(_translate("MainWindow", "Ends:"))
        self.timer_repeated_label.setText(_translate("MainWindow", "Repeated:"))
        self.timer_action_label.setText(_translate("MainWindow", "Action:"))
        self.timer_after_event_label.setText(_translate("MainWindow", "After event:"))
        self.timer_location_label.setText(_translate("MainWindow", "Location:"))
        self.timer_mo_label.setText(_translate("MainWindow", "Mo"))
        self.timer_tu_label.setText(_translate("MainWindow", "Tu"))
        self.timer_we_label.setText(_translate("MainWindow", "We"))
        self.timer_th_label.setText(_translate("MainWindow", "Th"))
        self.timer_fr_label.setText(_translate("MainWindow", "Fr"))
        self.timer_sa_label.setText(_translate("MainWindow", "Sa"))
        self.timer_su_label.setText(_translate("MainWindow", "Su"))
        self.timer_search_edit.setPlaceholderText(_translate("MainWindow", "Search..."))
        # FTP page.
        self.ftp_src_group_box.setTitle(_translate("MainWindow", "FTP"))
        self.ftp_src_status_label.setText(_translate("MainWindow", "Status:"))
        self.ftp_dest_group_box.setTitle(_translate("MainWindow", "PC"))
        self.ftp_dest_status_label.setText(_translate("MainWindow", "Status:"))
        # FAV
        self.fav_group_box.setTitle(_translate("MainWindow", "Bouquet services"))
        self.fav_menu_button.setToolTip(_translate("MainWindow", "Tools"))
        self.bq_service_search_edit.setPlaceholderText(_translate("MainWindow", "Search..."))
        self.bouquets_group_box.setTitle(_translate("MainWindow", "Bouquets"))
        self.add_bouquet_button.setToolTip(_translate("MainWindow", "Add"))
        self.add_bouquet_button.setText(_translate("MainWindow", "Add"))
        # Menu bar.
        self.file_menu.setTitle(_translate("MainWindow", "File"))
        self.help_menu.setTitle(_translate("MainWindow", "Help"))
        self.settings_menu.setTitle(_translate("MainWindow", "Settings"))
        self.language_menu.setTitle(_translate("MainWindow", "Language"))
        self.view_menu.setTitle(_translate("MainWindow", "View"))
        self.tools_menu.setTitle(_translate("MainWindow", "Tools"))
        self.open_action.setText(_translate("MainWindow", "Open"))
        self.open_action.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.exit_action.setText(_translate("MainWindow", "Exit"))
        self.exit_action.setShortcut(_translate("MainWindow", "Ctrl+Q"))
        self.settings_action.setText(_translate("MainWindow", "Settings..."))
        self.menu_action_search.setText(_translate("MainWindow", "Search"))
        self.menu_action_search.setShortcut(_translate("MainWindow", "Ctrl+F"))
        self.menu_action_filter.setText(_translate("MainWindow", "Filter"))
        self.menu_action_filter.setShortcut(_translate("MainWindow", "Ctrl+Shift+F"))
        self.import_action.setText(_translate("MainWindow", "Import"))
        self.extract_action.setText(_translate("MainWindow", "Extract..."))
        self.about_action.setText(_translate("MainWindow", "About"))
        self.english_lang_action.setText(_translate("MainWindow", "English"))
        self.bouquets_action.setText(_translate("MainWindow", "Bouquets"))
        self.satellites_action.setText(_translate("MainWindow", "Satellites"))
        self.picons_action.setText(_translate("MainWindow", "Picons"))
        self.epg_action.setText(_translate("MainWindow", "EPG"))
        self.timer_action.setText(_translate("MainWindow", "Timer"))
        self.logo_action.setText(_translate("MainWindow", "Logo"))
        self.log_action.setText(_translate("MainWindow", "Log"))
        # ******************** Popups and menu. ******************** #
        # FAV tools menu.
        self.fav_tools_menu.setTitle(_translate("MainWindow", "Tools"))
        self.add_stream_action.setText(_translate("MainWindow", "Add IPTV or stream service"))
        self.import_m3u_action.setText(_translate("MainWindow", "Import *m3u"))

    def on_stack_page_changed(self, state, p_num):
        if state:
            self.stacked_widget.setCurrentIndex(p_num)
            self.fav_splitter.setVisible(p_num not in (Page.SAT, Page.FTP, Page.LOGO))
            is_file_action = p_num in (Page.BOUQUETS, Page.SAT, Page.PICONS)
            self.open_action.setEnabled(is_file_action)
            self.import_action.setEnabled(is_file_action)
            self.extract_action.setEnabled(is_file_action)
            self.upload_tool_button.setEnabled(is_file_action)

    def on_current_page_changed(self, index):
        page = Page(index)
        self.current_page = page
        if page is Page.PICONS:
            self.on_picon_page_show()
        if page is Page.TIMER:
            self.on_timer_page_show()

    def on_picon_page_show(self):
        pass

    def on_timer_page_show(self):
        pass
